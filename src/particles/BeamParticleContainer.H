#ifndef HIPACE_BeamParticleContainer_H_
#define HIPACE_BeamParticleContainer_H_

#include <AMReX_AmrParticles.H>
#include <AMReX_Particles.H>
#include <AMReX_AmrCore.H>

struct BeamIdx
{
    enum {
        w = 0,      // weight
        ux, uy, uz, // momentum
        nattribs
    };
};

class BeamParticleContainer
    : public amrex::ParticleContainer<0, 0, BeamIdx::nattribs>
{
public:
    explicit BeamParticleContainer (amrex::AmrCore* amr_core) :
        amrex::ParticleContainer<0,0,BeamIdx::nattribs>(amr_core->GetParGDB())
    {
        ReadParameters();
    }

    /** Read parameters in the input file */
    void ReadParameters ();

    void InitData (const amrex::Geometry& geom);

    void InitCanBeam (
        const amrex::IntVect&  a_num_particles_per_cell,
        const amrex::Real      a_thermal_momentum_std,
        const amrex::Real      a_thermal_momentum_mean,
        const amrex::Real      a_density,
        const amrex::Geometry& a_geom,
        const amrex::Real     a_zmin,
        const amrex::Real     a_zmax,
        const amrex::Real     a_radius);

private:
    amrex::Real m_zmin; /**< Min longitudinal position of the can beam */
    amrex::Real m_zmax; /**< Max longitudinal position of the can beam */
    amrex::Real m_radius; /**< Radius of the can beam */
    amrex::Real m_density; /**< Density of the can beam */
    amrex::IntVect m_ppc {1, 1, 1}; /**< Number of particles per cell in each direction */
    amrex::Real m_uz_mean = 0.; /**< Avg momentum along z, normalized by m*c */
    amrex::Real m_u_std = 0.; /**< Thermal momentum, normalized by m*c. Same in all directions */
};


class BeamParticleIterator : public amrex::ParIter<0,0,BeamIdx::nattribs>
{
public:
    using amrex::ParIter<0,0,BeamIdx::nattribs>::ParIter;
    BeamParticleIterator (ContainerType& pc, int level): ParIter(pc, level) {}
};

#endif
